"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9923],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},604:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="Filter Queries",s={unversionedId:"intro/filterQueries",id:"intro/filterQueries",title:"Filter Queries",description:"Filters are needed in order to divide the logic into different types of updates, as well as to understand that you are",source:"@site/docs/intro/filterQueries.mdx",sourceDirName:"intro",slug:"/intro/filterQueries",permalink:"/ru/docs/intro/filterQueries",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro/filterQueries.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Telegram Bots API",permalink:"/ru/docs/intro/telegram-bots-api"},next:{title:"Troubleshooting",permalink:"/ru/docs/troubleshooting"}},l={},c=[{value:"Filter types",id:"filter-types",level:2},{value:"How filters works",id:"how-filters-works",level:2},{value:"Examples",id:"examples",level:2},{value:"Regular Queries",id:"regular-queries",level:3},{value:"With sugar and advanced filtering",id:"with-sugar-and-advanced-filtering",level:3},{value:"Text messages",id:"text-messages",level:4},{value:"Callback query",id:"callback-query",level:4},{value:"Entities",id:"entities",level:4},{value:"Combining queries",id:"combining-queries",level:3}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"filter-queries"},"Filter Queries"),(0,r.kt)("p",null,"Filters are needed in order to divide the logic into different types of updates, as well as to understand that you are\nguaranteed to work with the object you expected."),(0,r.kt)("p",null,"Of course, you can try to use ",(0,r.kt)("inlineCode",{parentName:"p"},"if-else")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"switch"),", but they are usually not so convenient and create a lot of\nboilerplate code. The built-in filtering methods in Opengram allow you to filter updates easily and flexibly."),(0,r.kt)("h2",{id:"filter-types"},"Filter types"),(0,r.kt)("p",null,"Filters are present in the Composer class, its instances and all classes that inherit from it (Wizard / BaseScenes,\nOpengram) and are divided into several types:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Static methods - Usually often used where it is not required to create a chain of handlers and can be used to move\nthe handlers in place with their filtering logic to a separate file."),(0,r.kt)("li",{parentName:"ul"},"Instance methods - Methods that are used to create filters and immediately register them on the current instance.\nThey are the most commonly used. As an example, this is registering handlers directly to a bot instance\n(like bot.on or bot.hears)")),(0,r.kt)("p",null,"Typically, filters exist as static methods and class members."),(0,r.kt)("h2",{id:"how-filters-works"},"How filters works"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"It may seem that the ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," method is an EventEmitter method, but it is not, it returns middleware like other methods, and is not an EventEmitter")),(0,r.kt)("p",null,"Typically, you can filter by update type using ",(0,r.kt)("inlineCode",{parentName:"p"},".on")," method. If you look ",(0,r.kt)("a",{parentName:"p",href:"https://core.telegram.org/bots/api#update"},"Update"),"\nin Bots API reference, you can see update types like ",(0,r.kt)("inlineCode",{parentName:"p"},"inline_query"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"callback_query")," and other, all of the\nthen you can filter using .on method and some sugar methods like ",(0,r.kt)("inlineCode",{parentName:"p"},"hears"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"inlineQuery"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," (",(0,r.kt)("inlineCode",{parentName:"p"},"callback_query"),")\nand etc ."),(0,r.kt)("p",null,"Also, some of the updates may have subtypes - ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"edited_message"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"channel_post"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"edited_channel_post"),",\nevery of them can contain subtypes like ",(0,r.kt)("inlineCode",{parentName:"p"},"video"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"audio"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"text"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"photo"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"dice"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"poll")," and many others."),(0,r.kt)("p",null,"All filters can accept predicate function, regular expression or string or array of them."),(0,r.kt)("p",null,"Something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"filter(['string', 'string2', (...) => ..., /test ([0-9]+)/], ...)\nfilter('sometext', ...)\n")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"All methods except ",(0,r.kt)("inlineCode",{parentName:"p"},".on(...)")," call ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," automatically if the filter does not fit the condition, this means that if you use this method (especially several), you should call ",(0,r.kt)("inlineCode",{parentName:"p"},"next")," yourself in order to not stop the execution chain."),(0,r.kt)("p",{parentName:"admonition"},"For example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"bot.on('message', (ctx) => {\n  // executed\n})\n\nbot.on('message', (ctx) => {\n  // never executed\n})\n\nbot.hears('hi', ctx => {\n  // never executed\n})\n")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"bot.on('message', async (ctx, next) => {\n  // executed\n  await next()\n})\n\nbot.on('message', async (ctx, next) => {\n  // executed\n  await next()\n})\n\nbot.hears('hi', ctx => {\n  // executed\n})\n"))),(0,r.kt)("h3",{id:"regular-queries"},"Regular Queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"bot.on('callback_query', ...) // any callback query\nbot.on('edited_message', ...); // any edited message\nbot.on('message', ...); // any message\nbot.on('text', ...); // only messages with text\nbot.on('photo', ...); // only messages with photo\nbot.on('sticker', ...); // only messages with sticker\n")),(0,r.kt)("h3",{id:"with-sugar-and-advanced-filtering"},"With sugar and advanced filtering"),(0,r.kt)("h4",{id:"text-messages"},"Text messages"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// you can access match result from ctx.match. For this example it contains something like ['test 2', '2']\nbot.hears(/^test ([0-9])/, ...) // messages which starts with \"test\" and contains 0-9 number after that by using regex\nbot.hears('test', ...) // only messages where text = \"test\"\n// custom filtering function\n// if text contains \"test\" or \"test2\", middlewares will be executed and ctx.match will be \"hello\"\nbot.hears((value, ctx) => {\n// value - text of message, ctx - context\n if (['test', 'test2'].includes(value) {\n   return 'hello'\n }\n\n return false\n}, ...)\n\n// text is \"opengram\" or \"bot\"\nbot.hears(['opengram', 'bot'], ...)\n\n// All above can be used with static methods, for example\nbot.use(\n  Composer.hears(/^test ([0-9])/, ...)\n)\n")),(0,r.kt)("h4",{id:"callback-query"},"Callback query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// you can access match result from ctx.match. For this example it contains something like ['test 2', '2']\nbot.action(/^test ([0-9])/, ...) // messages which starts with \"test\" and contains 0-9 number after that by using regex\nbot.action('test', ...) // only messages where text = \"test\"\n// custom filtering function\n// if callback_query data contains \"test\" or \"test2\", middlewares will be executed and ctx.match will be \"hello\"\nbot.action((value, ctx) => {\n// value - text of message, ctx - context\n if (['test', 'test2'].includes(value) {\n   return 'hello'\n }\n\n return false\n}, ...)\n\n// callback query data is \"opengram\" or \"bot\"\nbot.action(['opengram', 'bot'], ...)\n\n// All above can be used with static methods, for example\nbot.use(\n  Composer.action(/^test ([0-9])/, ...)\n)\n")),(0,r.kt)("h4",{id:"entities"},"Entities"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// By entity name\nbot.entity('url', ...) // any contains url entity\nbot.entity('code', ...) // any contains code entity\n\n// custom match function\nbot.entity((type, value, ctx) => {\n  return type === 'code'\n}, ...)\n\n// or\n\nbot.email(...) // any contains email entity\nbot.cashtag(...) // any contains cashtag entity\nbot.textMention(...) // any contains text mention entity\n\n// All above can be used with static methods, for example\nbot.use(\n  Composer.entity('code', ...),\n  Composer.email(...),\n  Composer.cashtag(...),\n  Composer.textMention(...)\n)\n")),(0,r.kt)("h3",{id:"combining-queries"},"Combining queries"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"bot.on(['document', 'video'], ...) // Video or photo\nbot.on(['message', 'edited_message'], ...) // Video or photo\nbot.on(['message', 'edited_message'], ...) // Video or photo\nbot.hears([(value, ctx) => ..., (value, ctx) => ..., /^test/], ...) // 1st or 2nd predicate return truthy or regex match\nbot.action([(value, ctx) => ..., (value, ctx) => ..., /^test/], ...) // 1st or 2nd predicate return truthy or regex match\nbot.inlineQuery([(value, ctx) => ..., (value, ctx) => ..., /^test/], ...) // 1st or 2nd predicate return truthy or regex match\nbot.entity([\n  (type, value, ctx) => {\n    return type === 'code'\n  },\n  (type, value, ctx) => {\n    return type === 'email'\n  }\n], ...) // 1st or 2nd predicate return truthy\n")))}d.isMDXComponent=!0}}]);